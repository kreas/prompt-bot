generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  dreams         Dream[]
  favoriteDreams FavoriteDream[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dream {
  id          String       @id @default(cuid())
  prompt      String       @db.Text
  width       Int
  height      Int
  steps       Int
  seed        Int
  createdAt   DateTime     @default(now())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String       @default("pending")
  totalTime   Float?
  dreamImages DreamImage[]
}

model DreamImage {
  id             String          @id @default(cuid())
  dreamId        String
  dream          Dream           @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  seed           Int
  image          String
  createdAt      DateTime        @default(now())
  shared         Boolean         @default(false)
  FavoriteDreams FavoriteDream[]
  upscaledDream  UpscaledDream?
}

model FavoriteDream {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dreamImageId String
  dreamImage   DreamImage @relation(fields: [dreamImageId], references: [id], onDelete: Cascade)
}

model UpscaledDream {
  id               String     @id @default(cuid())
  dreamImageId     String     @unique
  dreamImage       DreamImage @relation(fields: [dreamImageId], references: [id], onDelete: Cascade)
  upscaledImageURL String?
  createdAt        DateTime   @default(now())
  status           String     @default("pending")
  scale            Int
}
